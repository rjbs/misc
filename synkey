#!/usr/local/bin/perl
use strict;
use warnings;
use Path::Class;

my $ROOT = dir(
  $ENV{TEST} ? "$ENV{HOME}/tmp/RJBS-KEY" : "/Volumes/RJBS-KEY/git"
);

print "key drive not mounted; skipping\n" and exit unless -d $ROOT;

my %remote = (
  'rjbs/conf'     => [ 'git.rjbs.manxome.org', 'git/conf'      ],
  'rjbs/talks'    => [ 'git.rjbs.manxome.org', 'git/talks/*'   ],
  'rjbs/writing'  => [ 'git.rjbs.manxome.org', 'git/writing/*' ],

  'code/projects' => [   'git.codesimply.com', '/var/lib/gitosis/repositories/*', 'git' ],
  'code/rjbs'     => [ 'git.rjbs.manxome.org', 'git/code'      ],
);

sub clone_from_to {
  my ($remote, $path) = @_;

  my ($remote_leaf) = $path =~ m{/?([^/]+)/?\z};

  my ($local_root, $local_leaf) = $remote =~ m{(.+)/([^/]+)\z};

  my $is_starry = $remote{$remote}->[1] =~ m{\*\z};

  my $clone_in = $is_starry
               ? $ROOT->subdir($remote)
               : $ROOT->subdir($local_root);

  my $pull_in = $clone_in->subdir($is_starry ? $remote_leaf : $local_leaf);

  my $prefix = $pull_in->relative($ROOT);

  if (-d $pull_in) {
    chdir $pull_in;
    print "$prefix: $_" for `git pull -q`;
  } else {
    $clone_in->mkpath;
    chdir $clone_in;
    my $host = $remote{$remote}->[0];
    my $user = $remote{$remote}->[2] ? "$remote{$remote}->[2]@" : '';
    # my $root = $path =~ m{^/} ? '' : '~rjbs/';
    s/ /\\ /g for ($path, $remote_leaf);
    $path =~ s{.+/gitosis/repositories/}{}; # XXX worst line in here?
    my $url = "$user$host:$path";
    my $call_it = $is_starry ? $remote_leaf : $local_leaf;
    print "--> git clone -q $url $call_it\n";
    print "$prefix: $_" for `git clone -q $url $call_it`;
  }
}

for my $remote (@ARGV ? @ARGV : keys %remote) {
  next unless exists $remote{ $remote };
  my ($host, $path) = @{ $remote{$remote} };

  my @dirs;
  if ($path =~ m{(.+/)\*\z}) {
    $path = $1;
    @dirs =`ssh $host find $path -type d -mindepth 1 -maxdepth 1`;
    chomp @dirs;
    s/\.git$// for @dirs;
  } else {
    @dirs = $path;
  }

  clone_from_to($remote, $_) for sort @dirs;
}

