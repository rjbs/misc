#!/usr/bin/env perl
use strict;
use warnings;

use Config::INI::Reader;
use Getopt::Long::Descriptive;
use JSON::XS;
use LWP::Simple qw(get);

my ($opt, $usage) = describe_options(
  '%c %o',
  [ 'private|p!', 'include private repositories'     ],
  [ 'base|b!',    'produce bare clones'              ],
  [ 'login|l=s',  'login to use (instead of config)' ],
  [ 'token|t=s',  'token to use (instead of config)' ],
  [ 'clonely|c',  'only clone things that do not exist; skip others' ],
);

my $config  = Config::INI::Reader->read_file("$ENV{HOME}/.gitconfig");
my $login   = $opt->{login} || $config->{github}{login};
my $token   = $opt->{token} || $config->{github}{token};

my $json =
  get("http://github.com/api/v1/json/$login?login=$login&token=$token");

my $data    = JSON::XS->new->decode($json);

my @repositories = @{ $data->{user}{repositories} };

my %existing_dir  = map { $_ => 1 } grep { $_ !~ m{\A\.} and -d $_ } <*>;

for my $repo (sort { $a->{name} cmp $b->{name} } @repositories) {
  next if $repo->{private} and not $opt->{private};

  my $name = $repo->{name};
  my $uri  = sprintf 'git@github.com:%s/%s.git', $login, $name;

  if (-d $name) {
    do_cmd("cd $name && git pull 2>&1") unless $opt->{clonely};
  } else {
    my $bare = $opt->{bare} ? '--bare' : '';
    do_cmd("git clone $bare $uri 2>&1");
  }

  delete $existing_dir{ $name };
}

for (keys %existing_dir) {
  warn "unknown directory found: $_\n";
}

sub do_cmd {
  my ($cmd) = @_;
  print "$cmd\n";
  print `$cmd`;
}
