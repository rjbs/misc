: find the perl interpreter as long as it's in the user's path
eval 'exec perl -wS $0 ${1+"$@"}'
	if 0;
# vim:ft=perl:tw=0

############################################################################
# please change this accordingly if you change the DESTDIR in the tarball 
# distribution Makefile
# for example if you make DESTDIR=/usr then $LIBDIR="/usr/lib/jgal"
$LIBDIR = "/usr/local/lib/jgal";

############################################################################
#
# This is jGal, an XHTML image gallery generator
#   Copyright (C) 2002-2003 Ricardo SIGNES
#   Derived from IGAL version 1.3, Copyright (C) 2000 Eric Pop
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# Author: Ricardo SIGNES
# Email: rjbs-jgal@public.manxome.org

use File::Copy;
use File::Glob ':glob';
use Getopt::Long;
	$Getopt::Long::ignorecase = 0;

use strict;

use vars qw[
	$LIBDIR
	%config

	$gallery

	$indextemplate
	$slidetemplate
	$styletemplate

	$usage
	$version
	@msgprefix
	@path
];

=head1 SUBROUTINE DEFINITIONS

=over

=item exist($file)

This routine returns true if a file exists in the user's path or false
otherwise.

=cut

sub exist($) {
    my ($program) = @_;
    foreach my $dir (split(/:/,$ENV{'PATH'})) {
		return 1 if (-x "$dir/$program");
    }
	return 0;
}

=item image_info($file)

This routine returns an array of information about the file named by C<$file>.
The routine return this information as a list in the format (width, height,
filesize).

=cut

sub image_info {
	my $file = shift;

	my $result = `identify -ping \"$file\"`;
	$result =~ /\s(\d+)x(\d+).*?((\d+(?:\.\d+)?)(?:k|k?b))/;
	my ($x, $y) = ($1, $2);
	my $size = $3;

	# if size is written as 500k, change it to 500kb
	$size .= 'b' if $size =~ /k$/;
	# if size is in bytes (such as 500b), strip off the b and change it to kb
	$size = sprintf("%.0fkb", $size/1000) if ($size =~ s/(\d+)b$/$1/);
	
	return ($x, $y, $size);
}

=item dir_images($dir)

This routine returns a LOH describing the images listed in the directory named
by C<$dir>.

=cut

sub dir_images($) {
	my $dir = shift;
	my @dir_images;

	opendir DIR, $dir or return ();

	foreach my $image (sort grep((!/^\./ and /\.(jpe?g|gif|png)$/i), readdir DIR)) {
		(my $caption = $image) =~ s/\.[^.]+$//;
		(my $ext     = $image) =~ s/^.*\.//;

		push @dir_images, {
			filename	=> $image,
			title		=> $caption,
			caption		=> $caption,
			extension	=> $ext
		};
	}

	closedir DIR;

	return @dir_images;
}

=item cap_images($cap)

This routine returns a LOH describing the images listed in the caption file
named by C<$cap>.

=cut

sub cap_images($) {
	my $cap = shift;
	my @cap_images;

	# read in files specified in the .captions file
	open(CAP,$cap)
		or die "$msgprefix[1] can't open captions file ($cap)\n";

	print "$msgprefix[1] processing captions file ($cap)\n";
	while (defined(my $line = <CAP>)) {
		chomp($line); $line =~ s/^\s*//; $line =~ s/\s*$//;
		# only read lines with the ---- delimiter that don't start with #
		if (($line =~ m/[-._A-Za-z0-9]\s*----\s*/) && !($line =~ m/^\#/)) {
			my @arr = split(/\s*----\s*/,$line);

			if ($arr[0] eq '.') {
				$gallery->{title} = $arr[1];
				next;
			} else {
				$arr[1] ||= '';
				$arr[2] ||= $arr[1];

				push @cap_images, {
					filename	=> $arr[0],
					title		=> $arr[1],
					caption		=> $arr[2]
				} if (-r $arr[0]);
			}
		}
	}
	close(CAP);

	return @cap_images;
}

=item cap_create($captions)

This routine writes out a captions file describing the images found in the
gallery's image list.

=cut

sub cap_create($) {
	my $captions = shift;

	# create $config{filename_captions} file if it doesn't exist
	print "$msgprefix[0] creating captions file ($captions)\n";
	print "$msgprefix[2] found ", scalar @{$gallery->{images}}, " image files\n";
	die   "$msgprefix[2] please select more files for your slide show!\n"
		if (@{$gallery->{images}} <= 1);

	open(CAP,">$captions") or die "Can't create captions file ($captions)\n";
	print "$msgprefix[2] writing to $captions\n";
	print CAP "# This is jgal's captions file, first generated ", scalar localtime, ".\n";
	print CAP <<EOT;
# To the left of the separator are the image file names.  Enter your captions
# on the right side, one per line.  The captions may include HTML tags.
# To add any comments to this file or to exclude any images from the slide 
# show, add a # sign at the beginning of their respective lines.  You may
# also change the order of images in your slide show at this time.

EOT
		for (my $i = 0; $i < @{$gallery->{images}}; $i++) {
			print CAP "$gallery->{images}[$i]->{filename} ---- ";
			print CAP "$gallery->{images}[$i]->{caption}" if $config{captions_use_filenames};
			print CAP "\n";
		}
	close(CAP);
}

=item cap_update($captions)

This routine updates the captions file.  Images that exist are preserved, as
are comments.  Images without entries are added, and entries without images are
removed.

=cut

sub cap_update($) {
	my $captions = shift;

	my @dir_images = dir_images('.');
	my @cap_images = cap_images($captions);
	my %dir_images;

	foreach my $image (@dir_images) {
		$dir_images{$image->{filename}} = 1;
	}

	# update captions file
	unlink("$captions-tmp") if (-f "$captions-tmp");

	print "$msgprefix[0] opening captions file ($captions)\n";
	open(CAPO, "<$captions") or die "$msgprefix[2] Can't open captions file ($captions)\n";
	print "$msgprefix[0] creating temporary captions file ($captions-tmp)\n";
	open(CAPN, ">$captions-tmp") or die "$msgprefix[2] Can't create temporary captions file ($captions-tmp)\n";

	while (my $line = <CAPO>) {
		chomp($line); $line =~ s/^\s*//; $line =~ s/\s*$//;
		# only read lines with the ---- delimiter that don't start with #
		if (($line =~ m/[-._A-Za-z0-9]\s*----\s*/) && !($line =~ m/^\#/)) {
			my @arr = split(/\s*----\s*/,$line);

			if ($arr[0] eq '.') {
				print CAPN "$line\n";
			} else {
				if ($dir_images{$arr[0]}) {
					print CAPN "$line\n";
					delete $dir_images{$arr[0]};
				} else {
					print CAPN "# $line\n";
				}
			}
		} else {
			print CAPN "$line\n";
		}
	}
	
	foreach my $image (keys %dir_images) {
		print CAPN "$image ---- ";
		print CAPN "$image" if $config{captions_use_filenames};
		print CAPN "\n";
	}

	close(CAP);
	close(CAPN);

	rename("$captions-tmp",$captions);
}

=item resize_image($src,$dst,$x,$y)

=cut

sub resize_image($$$$) {
	my ($src, $dst, $x, $y) = @_;
	my $command;

	copy($src,$dst);

	$command =
		'mogrify -geometry ' .
		($x ? $x : '') .
		($y ? "x$y" : '') .
		" \"$dst\""
	;

	if (system($command)) {
		unlink $dst;
		die "$msgprefix[2] mogrify died!\n";
	}

}

=item uri_encode($string)

This sub returns the passed string URI-encoded.  This URI-encoding is mediocre.

=cut

sub uri_encode($) {
	my $string = shift;

	$string =~ s/%/%25/g;
	$string =~ s/#/%23/g;
	$string =~ s/</%3c/g;
	$string =~ s/>/%3e/g;
	$string =~ s/"/%22/g;
	$string =~ s/ /%20/g;

	return $string;
}

=item index_page($int)

This sub returns the filename of a given index page in the gallery.

=cut

sub index_page($) {
	my $pagenum = shift;

	(my $index_page = $config{filename_index_pages}) =~ s/#/$pagenum/;

	return $index_page;
}

=back

=head1 CONFIGURATION

=head2 initialize global variables

=cut

@msgprefix = ('(??)','(??) |-->','(??) |   |-->');

$gallery->{title} = '';

%config = (
	captions_generate		=> 0,
	captions_use_filenames	=> 0,
	captions_as_titles		=> 0,

	columns					=> 5,

	count_omit				=> 0,

	css_file				=> 'jgal.css',
	css_href				=> '',
	css_omit				=> 0,

	dir_starting			=> undef,
	dir_templates			=> '',

	filename_captions		=> '.captions',
	filename_index			=> 'index.html',
	filename_index_pages	=> 'index_#.html',
	filename_slides_from_images	=> '1',
	filename_tile			=> 'tile.jpg',
	filename_slidetemplate	=> 'slidetemplate.html',
	filename_indextemplate	=> 'indextemplate.html',

	files_permissions		=> 0,

	path					=> "$LIBDIR:$ENV{HOME}/.jgal:./.jgal",
	path_prepend			=> undef,
	path_append				=> undef,

	prefix_thumbnail		=> '.thumb_',
	prefix_slide			=> '.slide_',
	
	have_imagemagick		=> 0,

	rows_per_page			=> 0,

	slide_height			=> 0,
	slide_major				=> 0,

	thumbnail_height		=> 0,
	thumbnail_major			=> 0,
	thumbnail_regenerate	=> 0,
	thumbnail_link_to_image	=> 0,
	thumbnail_display_dimensions => 0,
	thumbnail_display_size	=> 0,
	thumbnail_display_caption	=> 0,
	thumbnail_display_title	=> 0,

	tile_height				=> 28,
	tile_omit				=> 0
);

$version = <<END_OF_HELP;
jGal D2 [2003-04-04]
an XHTML image slide show generator
copyright (C) 2002-2003, Ricardo SIGNES <rjbs-jgal\@public.manxome.org>
derived from iGal, copyright (C) 2000-2001, Eric POP

This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
END_OF_HELP

$usage = <<END_OF_USAGE;
Usage  :  jgal [-option -option ...]
  -a          write image sizes under thumbnails on index page
  -c          generate or update captions file
  -C          like -c, but use file names as initial captions
  -d <dir>    operate on files in directory <dir> (.)
  -f          force thumbnail regeneration
  -h          displays this brief help; same as --help
  -i <file>   name of the main thumbnail index file (index.html)
  -k          use the image captions for the HTML slide titles
  -n          use image file names for the HTML slide files
  -p <n>      number of thumbnails per page (infinite)
  -r          omit the film reel effect altogether
  -s          make no HTML slides, link thumbnails to images
  -t <n>      height of the film reel tiled image (28)
  -u          write captions under thumbnails on index page
  -w <n>      rows in thumbnail index are <n> images wide (5)
  -x          omit the image count from the captions
  -y <n>      scale all thumbnails to the same height <n> (75)
  --ad        like -a, but write only the image dimensions
  --as        like -a, but write only the file size (in kbytes)
  --bigxy <n> like -xy, to shrink huge image slides on the fly
  --bigy <n>  like -y, to shrink huge image slides on the fly
  --help      displays this brief help; same as -h
  --version   display the version and exit
  --www       make all jgal files world-readable
  --xy <n>    scale thumbs to <n> pixels in their longer dimension
Note:     default values are given in parentheses (where applicable).
END_OF_USAGE

=head2 populate @path

=cut

push @path, split(':', $config{path_prepend}) if $config{path_prepend};
push @path, split(':', $config{path});
push @path, split(':', $config{path_append}) if $config{path_append};

=head2 parse option files in path order

=cut

foreach my $dir (@path) {
	if (-r "$dir/options") {
		open JGALRC, "$dir/options";
		while (my $jline = <JGALRC>) {
			chomp $jline;
			if ($jline =~ /^#.*$/) {
				next;
			} elsif ($jline =~ /^\s*$/) {
				next;
			} elsif ($jline =~ m/^\s*option (\w+) ([\/.[:word:]]+)$/) {
				my $option = $1;
				my $value  = $2;
				if (defined $config{$1}) {
					$value =~ s/^(yes|true)$/1/i;
					$value =~ s/^(no|false)$/0/i;
					$config{$option} = $value;
				} else {
					die "unknown option '$option' in $dir/options";
				}
			}
		}
	}
}

=head2 get command-line arguments

=cut

GetOptions(
	\%config,
	'captions_as_titles|k',
	'captions_generate|c',
	'captions_use_filenames|C',
	'columns|w=i',
	'count_omit|x',
	'css_file=s',
	'css_href=s',
	'css_omit',
	'dir_starting|d=s',
	'filename_index|i=s',
	'filename_slides_from_images|n',
	'files_permissions|chmod=s',
	'files_worldreadable|www',
	'help|h',
	'rows_per_page|p=i',
	'slide_height|bigy=i',
	'slide_major|bigxy=i',
	'thumbnail_display_caption|u',
	'thumbnail_display_dimensions|ad',
	'thumbnail_display_size|as',
	'thumbnail_display_title|U',
	'thumbnail_height|y=i',
	'thumbnail_link_to_image|s',
	'thumbnail_major|xy=i',
	'thumbnail_regenerate|f',
	'tile_height|t=i',
	'tile_omit|r',
	'version'
) or die "$usage";

=head2 first-run option processing

=cut

die $usage if ($config{help});

die $version if ($config{version});

=over

=item have_imagemagick

If have_imagemagick isn't set, look for it in the user's system path.  If it
can't be found, die.

=cut

$config{have_imagemagick} ||= (&exist("identify") and &exist("mogrify"));

die "$msgprefix[1] imagemagick is missing from or not executeable in your path\n"
	unless ($config{have_imagemagick});

=item files_permissions

If files_permissions is set, convert it from a string of octal digits into a
number.

=cut

$config{files_permissions} = oct($config{files_permissions}) if ($config{files_permissions});

=item files_worldreadable

If files_worldreadable is set (and files_permissions isn't) set
files_permissions to 0644.

=cut

if ($config{files_worldreadable} and not $config{files_permissions}) {
	$config{files_permissions} = 0644;
}

=item thumbnail_height and thumbnail_major

If neither thumbnail_height nor thumbnail_major is set, set thumbnail_height to
75.  If both are set, die.  If either is negative, die.

=cut

if (($config{thumbnail_height} == 0) and ($config{thumbnail_major} == 0)) {
	$config{thumbnail_height} = 75;    # default, if neither -y nor --xy is specified
}

if ($config{thumbnail_height} and $config{thumbnail_major}) {
	die "$msgprefix[0] specify only one of thumbnail_height or thumbnail_major\n";
}

if (($config{thumbnail_height} < 0) or ($config{thumbnail_major} < 0)) {
	die "$msgprefix[0] thumbnail dimensions must be non-negative\n"
}

=item columns

If columns is negative, die.

=cut

if ($config{columns} <= 0) {
	die "$msgprefix[0] rows must contain at least one column\n";
}

=item tile_height

If tile_height is negative, die.

=cut

if ($config{tile_height} < 0) {
	die "$msgprefix[0] the tiled border must be zero or more pixels high\n";
}

=item dir_starting

If dir_starting is set, chdir to it.  If this fails, die.

=cut

if ($config{dir_starting}) {
	die "$msgprefix[0] could not chdir to starting dir ($config{dir_starting})\n" 
		unless (chdir($config{dir_starting}));
}

=back

=head1 PROCESS SOURCE FILES

=head2 build image list

If the captions file exists, read it and use its content to build the image
list.  Otherwise, build the image list from the directory's contents.

=cut

if (-r "$config{filename_captions}") {
	@{$gallery->{images}} = cap_images("$config{filename_captions}");
} else {
	unless (@{$gallery->{images}} = dir_images('.')) {
		die "$msgprefix[0] Can't find any image files in directory starting directory\n";
	}
}

=head2 sanity-check image names

Create a 'safename' attribute for use in URIs.  If any file has illegal
characters in its name (q.v. RFC2396), use a %-escaped entity.

=cut

foreach my $image (@{$gallery->{images}}) {
	$image->{safename} = uri_encode($image->{filename});
}

=head2 generate captions file (optional)

If captions_generate or captions_use_filenames is set, but the caption file
does not exist, generate it from the image list.

=cut

if ($config{captions_generate} or $config{captions_use_filenames}) {
	if (! -r "$config{filename_captions}") {
		cap_create($config{filename_captions});
		die "$msgprefix[2] edit $config{filename_captions} and rerun jgal\n";
	} else {
		cap_update($config{filename_captions});
		die "$msgprefix[2] edit $config{filename_captions} and rerun jgal\n";
	}
}

print "$msgprefix[2] found ", scalar @{$gallery->{images}}, " image files\n";

print "$msgprefix[0] preparing images\n";

=head2 determine image sizes

=cut

print "$msgprefix[1] determining image sizes\n";
foreach my $image (@{$gallery->{images}}) {
	@$image{qw[width height size]} = &image_info("$image->{filename}");

	print "$msgprefix[2] $image->{filename}\n";
}

=head1 GENERATE GALLERY

=head2 generate thumbnails

=cut

print "$msgprefix[1] creating thumbnails\n";
foreach my $image (@{$gallery->{images}}) {
	my ($fullfile, $fullthumb, $command);

	$fullfile = "$image->{filename}";
	die "$msgprefix[2] can't open $fullfile\n" unless (-r $fullfile);

	$fullthumb = "$config{prefix_thumbnail}$image->{filename}";

	if ((! -e $fullthumb) or $config{thumbnail_regenerate}) {
		my ($x, $y) = (0, 0);

		if ($config{thumbnail_major}) {
			if ($image->{width} > $image->{height}) {
				$x = $config{thumbnail_major};
			} else {
				$y = $config{thumbnail_major};
			}
		} else {
			$y = $config{thumbnail_height};
		}

		unless (
			(($image->{width} == $x) or ($x == 0)) and 
			(($image->{height} == $y) or ($y ==0))
		) {
			resize_image($fullfile,$fullthumb,$x,$y);
			print "$msgprefix[2] $fullthumb scaled\n";
		} else {
			copy($fullfile,$fullthumb);
			print "$msgprefix[2] $fullthumb copied\n";
		}
	}
}

=head2 generate slide images (optional)

=cut

if (($config{slide_height} or $config{slide_major}) and !($config{thumbnail_link_to_image})) {
	# $config{thumbnail_regenerate} = 1;
	# if --bigy <n> is specified, automatically force regeneration
	print "$msgprefix[1] scaling down big slides\n";

	foreach my $image (@{$gallery->{images}}) {
		my ($fullfile, $fullslide, $command);

		$fullfile = "$image->{filename}";
		die "$msgprefix[2] can't open $fullfile\n" unless (-r $fullfile);

		$fullslide = "$config{prefix_slide}$image->{filename}";

		if ((! -e $fullslide) or $config{thumbnail_regenerate}) {

			my ($x, $y) = (0, 0);

			if ($config{slide_major}) {
				if ($image->{width} > $image->{height}) {
					$x = $config{slide_major};
				} else {
					$y = $config{slide_major};
				}
			} else {
				$y = $config{slide_height};
			}
	
			unless (
				(($image->{width} == $x) or ($x == 0)) and 
				(($image->{height} == $y) or ($y ==0))
			) {
				resize_image($fullfile,$fullslide,$x,$y);
				print "$msgprefix[2] $fullslide scaled\n";
			} else {
				copy($fullfile,$fullslide);
				print "$msgprefix[2] $fullslide copied\n";
			}
		}

		$image->{qw[width height size]} = &image_info($fullslide);
	}
}

=head2 prepare gallery CSS 

=cut

$gallery->{style} = '';

unless ($config{css_omit}) {
	if ($config{css_href}) {
		$gallery->{style} = "<link rel='stylesheet' type='text/css' href='$config{css_href}' />";
	} elsif ($config{css_file}) {
		$gallery->{style} = "<style type='text/css'>\n";

		if ($config{dir_templates}) {
			$styletemplate = "$config{dir_templates}/$config{css_file}";
		} else {
			foreach my $dir (reverse @path) {
				if (-e "$dir/$config{css_file}") {
					$styletemplate = "$dir/$config{css_file}";
					last;
				}
			}
		}

		if ($styletemplate) {
			open CSS, $styletemplate;
			while (<CSS>) { $gallery->{style} .= $_; }
		}

		$gallery->{style} .= "</style>\n";
	}
}

=head2 create slide html files (optional)

=cut

if ($config{thumbnail_link_to_image}) {
	print "$msgprefix[0] no html slides needed (linking thumbnails directly to image files\n";
} else {
	print "$msgprefix[0] creating html slides\n";
	if ($config{filename_slides_from_images}) {
		# decide on the slide html file names
		foreach my $image (@{$gallery->{images}}) {
			my $slide = $image->{filename}; 
			$slide =~ s/\.[^.]+$/\.html/; 
			$image->{slide} = $slide;
			$image->{safeslide} = uri_encode($slide);
		}
	} else {
		for (my $i = 0; $i < @{$gallery->{images}}; $i++) {
			$gallery->{images}[$i]->{slide} = $gallery->{images}[$i]->{safeslide} = ($i + 1) . '.html';
		}
	}
	unlink(glob('*.html'));

	if ($config{dir_templates}) {
		$slidetemplate = "$config{dir_templates}/$config{filename_slidetemplate}";
	} else {
		foreach my $dir (reverse @path) {
			if (-e "$dir/$config{filename_slidetemplate}") {
				$slidetemplate = "$dir/$config{filename_slidetemplate}";
				last;
			}
		}
	}

	unless ($slidetemplate) {
		die "$msgprefix[2] cannot find slide template!\n";
	}
	
	for (my $i = 0; $i < @{$gallery->{images}}; $i++) {
		my $image = $gallery->{images}[$i];
		my $title; 

		open(SR,$slidetemplate)
			or die "$msgprefix[2] can't open the slide template file!\n";
		open(SW,">$image->{slide}") 
			or die "$msgprefix[2] can't create slide for $image->{filename}\n";
		print "$msgprefix[2] $image->{slide}\n";
		if ($config{captions_as_titles}) {
			# use image caption for the HTML slide title
			$title = $image->{title};
		} else {
			# otherwise use the image name (strip suffix)
			$title = $image->{filename};
			$title =~ s/\..+?$//;
		}
		while (defined(my $line = <SR>)) {
			my $prefix;

			$line =~ s/<!--SLIDE-TITLE-->/$title/g;
			$line =~ s/<!--INDEX-TITLE-->/$gallery->{title}/g;
			$line =~ s/<!--STYLE-->/$gallery->{style}/g;
			if ($line =~ m/<!--THIS-IMAGE-->/g) {
				if (($config{slide_height}) or ($config{slide_major})) {
					my $slide = $config{prefix_slide} . $image->{safename};
					$line =~ s/(<.*)<!--THIS-IMAGE-->(.)(.*>)/<a href=\"$image->{safename}\">$1$slide$2 $3<\/a>/;
				} else {
					$line =~ s/<!--THIS-IMAGE-->/$image->{safename}/g;
				}
			}
			$line =~ s/<!--IMAGE-CAPTION-->/$image->{caption}/g;
			$line =~ s/<!--IMAGE-TITLE-->/$image->{title}/g;

			# add in the image counter unless -x is specified
			my $imagecount = '(' . ($i+1) . '/' . scalar @{$gallery->{images}} . ')';
			$line =~ s/<!--IMAGE-COUNT-->/$imagecount/g unless $config{count_omit};

			my $current_index;
			if ($config{rows_per_page}) {
				$current_index = int($i / ($config{rows_per_page} * $config{columns}))+1;
			} else {
				$current_index = 1;
			}
				
			$line =~ s/<!--INDEX-FILE-->/index_page($current_index)/eg;

			if ($config{slide_height}) {
				$prefix = $config{prefix_slide};
			} else {
				$prefix = "";
			}
			$line =~ s/<!--FIRST-SLIDE-->/$gallery->{images}[0]->{safeslide}/g;
			$line =~ s/<!--LAST-SLIDE-->/$gallery->{images}[-1]->{safeslide}/g;
			if ($i == 0) {
				$line =~ s/<!--NEXT-IMAGE-->/$prefix$gallery->{images}[$i+1]->{safename}/g;
				$line =~ s/<!--PREV-SLIDE-->/$gallery->{images}[$i-1]->{safeslide}/g;
				$line =~ s/<!--NEXT-SLIDE-->/$gallery->{images}[$i+1]->{safeslide}/g;
				$line =~ s/<!--NEXT-THUMB-->/$config{prefix_thumbnail} . $gallery->{images}[$i+1]->{safename}/eg;
				$line =~ s/<!--PREV-THUMB-->/$config{prefix_thumbnail} . $gallery->{images}[$i-1]->{safename}/eg;
			} elsif ($i == (@{$gallery->{images}} - 1)) {
				$line =~ s/<!--NEXT-IMAGE-->/$prefix$gallery->{images}[0]->{safename}/g;
				$line =~ s/<!--PREV-SLIDE-->/$gallery->{images}[$i-1]->{safeslide}/g;
				$line =~ s/<!--NEXT-SLIDE-->/$gallery->{images}[0]->{safeslide}/g;
				$line =~ s/<!--NEXT-THUMB-->/$config{prefix_thumbnail} . $gallery->{images}[0]->{safename}/eg;
				$line =~ s/<!--PREV-THUMB-->/$config{prefix_thumbnail} . $gallery->{images}[$i-1]->{safename}/eg;
			} else {
				$line =~ s/<!--NEXT-IMAGE-->/$prefix$gallery->{images}[$i+1]->{safename}/g;
				$line =~ s/<!--PREV-SLIDE-->/$gallery->{images}[$i-1]->{safeslide}/g;
				$line =~ s/<!--NEXT-SLIDE-->/$gallery->{images}[$i+1]->{safeslide}/g;
				$line =~ s/<!--NEXT-THUMB-->/$config{prefix_thumbnail} . $gallery->{images}[$i+1]->{safename}/eg;
				$line =~ s/<!--PREV-THUMB-->/$config{prefix_thumbnail} . $gallery->{images}[$i-1]->{safename}/eg;
			}
			print SW "$line";
		}
		close(SW);
		close(SR);
	}
}

=head2 create index html file

=cut

if ($config{rows_per_page} > 0) {
	$gallery->{pages} = int((scalar @{$gallery->{images}}) / ($config{columns} * $config{rows_per_page}));
	if ((scalar @{$gallery->{images}}) % ($config{columns} * $config{rows_per_page})) { 
		$gallery->{pages}++;
	}
} else {
	$gallery->{pages} = 1;
	$config{rows_per_page} = int((scalar @{$gallery->{images}}) / ($config{columns})) + 1;
}

for (my $page = 1; $page <= $gallery->{pages}; $page++) {

	print "$msgprefix[0] creating index for page $page\n";
	if ($config{tile_omit}) {
		print "$msgprefix[1] omitting tiled borders\n";
	} elsif (! -e ".$config{filename_tile}") {
		print "$msgprefix[1] creating tiled borders\n";
		print "$msgprefix[2] no .$config{filename_tile} file; getting a copy from $LIBDIR/\n";
		die "$LIBDIR cannot be read or does not exist.\nPlease install jgal properly.\n" unless (-r $LIBDIR);
		die "$LIBDIR/$config{filename_tile} cannot be read or does not exist.\nPlease install jgal properly.\n" 
			unless (-r "$LIBDIR/$config{filename_tile}");
		copy("$LIBDIR/$config{filename_tile}",".$config{filename_tile}");
	} else {
		print "$msgprefix[2] found .$config{filename_tile} file; using it.\n";
	}

	if ($config{dir_templates}) {
		$indextemplate = "$config{dir_templates}/$config{filename_indextemplate}";
	} else {
		foreach my $dir (reverse @path) {
			if (-e "$dir/$config{filename_indextemplate}") {
				$indextemplate = "$dir/$config{filename_indextemplate}";
				last;
			}
		}
	}

	unless ($indextemplate) {
		die "$msgprefix[1] cannot find index template!\n";
	}

	open(IXR,$indextemplate) or die "$msgprefix[1] can't open the index template file\n";

	(my $current_index = $config{filename_index_pages}) =~ s/#/$page/;
	print "$msgprefix[1] creating the index file ($current_index)\n";

	open(IXW,">$current_index")
		or die "$msgprefix[1] can't create index file ($current_index)\n";
	# detect where the <!-- ********** --> line is
	while (defined(my $line = <IXR>)) {
		$line =~ s/<!--INDEX-TITLE-->/$gallery->{title}/g;
		$line =~ s/<!--STYLE-->/$gallery->{style}/g;

		$line =~ s/<!--FIRST-INDEX-->/index_page(1)/eg;
		$line =~ s/<!--LAST-INDEX-->/index_page($gallery->{pages})/eg;
		if ($page == 1) {
			$line =~ s/<!--NEXT-INDEX-->/index_page(2)/eg;
			$line =~ s/<!--PREV-INDEX-->/index_page($gallery->{pages})/eg;
		} elsif ($page+1 == $gallery->{pages}) {
			$line =~ s/<!--NEXT-INDEX-->/index_page(1)/eg;
			$line =~ s/<!--PREV-INDEX-->/index_page($page-1)/eg;
		} else {
			$line =~ s/<!--NEXT-INDEX-->/index_page($page+1)/eg;
			$line =~ s/<!--PREV-INDEX-->/index_page($page-1)/eg;
		}

		print IXW "$line";
		last if ($line =~ m/<!--IMAGES-->/);
	}

	# write out the tables with full rows
	print IXW "<table class='images'>\n";
	for (
		my $i = ($page - 1) * $config{rows_per_page};
		$i <= ($page * $config{rows_per_page}) - 1; 
		$i++
	) {
		#last if ($i > (int(@{$gallery->{images}} / $config{columns}) + ((@{$gallery->{images}} % $config{columns}) > 0))); 
		print "$msgprefix[2] image number $i\n";

		print "$msgprefix[2] row ", ($i+1), " thumbnails\n";
		print IXW "  <tr><td class='border' style='height:$config{tile_height}px;background-image:url(\".$config{filename_tile}\")' colspan='", $config{columns}, "'>&nbsp;</td></tr>\n" unless ($config{tile_omit});
		print IXW "  <tr>\n";
		for (my $j = 0; $j < $config{columns}; $j++) {
			if ($gallery->{images}[($i)*$config{columns}+$j]) {
				print IXW "    <td class='image'>\n      ";
				if ($config{thumbnail_link_to_image}) {
					print IXW "<a href=\"", ($gallery->{images}[($i)*$config{columns}+$j]->{safename} or ''), "\">";
				} else {
					print IXW "<a href=\"", ($gallery->{images}[($i)*$config{columns}+$j]->{safeslide} or ''), "\">";
				}
				my $thumb = $config{prefix_thumbnail} . $gallery->{images}[($i)*$config{columns}+$j]->{safename};
				print IXW "<img alt=\"image\" src=\"$thumb\" />";
				print IXW "</a>";
				print IXW "<p>", $gallery->{images}[($i)*$config{columns}+$j]->{title}, "</p>" if $config{thumbnail_display_title};
				print IXW "</td>\n";
			} else {
				print IXW "    <td class='blank'></td>\n";
			}
		}
		print IXW "  </tr>\n";
		print IXW "  <tr><td class='border' style='height:$config{tile_height}px;background-image:url(\".$config{filename_tile}\");' colspan='", $config{columns}, "'>&nbsp;</td></tr>\n" unless ($config{tile_omit});
		if (($config{thumbnail_display_dimensions} or $config{thumbnail_display_size}) and $config{have_imagemagick}) {
			print IXW "  <tr>\n";
			for (my $j = 0; $j < $config{columns}; $j++) {
				if ($gallery->{images}[($i)*$config{columns}+$j]) {
					print IXW "    <td class='image'>";
					if ($config{thumbnail_display_size}) {
						print IXW "<p>$gallery->{images}[($i)*$config{columns}+$j]->{size}</p>";
					}
					if ($config{thumbnail_display_dimensions}) {
						print IXW
						"<p>$gallery->{images}[($i)*$config{columns}+$j]->{width}x$gallery->{images}[($i)*$config{columns}+$j]->{height}</p>";
					}
					print IXW "</td>\n";
				} else {
					print IXW "    <td class='blank'></td>\n";
				}
			}
			print IXW "  </tr>\n";
		}
	#	write image captions under images if option -u is given
		if ($config{thumbnail_display_caption}) {
			print "$msgprefix[2] row ", ($i+1), "captions\n";
			print IXW "  <tr>\n";
			for (my $j = 0; $j < $config{columns}; $j++) {
				if ($gallery->{images}[($i)*$config{columns}+$j]) {
					print IXW "    <td style='vertical-align:middle;text-align:center'>";
					my $temp = $gallery->{images}[($i)*$config{columns}+$j]->{caption};
		#			strip image file suffix (if any)
					$temp =~ s/^.*\.//;
					print IXW "$temp</td>\n";
				} else {
					print IXW "    <td></td>\n";
				}
			}
			print IXW "  </tr>\n";
		}
	}
	print IXW "</table>\n";

	# while (!(<IXR> =~ m/\*{10}/)) {};
	while (defined(my $line = <IXR>)) {
		$line =~ s/<!--INDEX-TITLE-->/$gallery->{title}/g;
		$line =~ s/<!--STYLE-->/$gallery->{style}/g;

		$line =~ s/<!--FIRST-INDEX-->/index_page(1)/eg;
		$line =~ s/<!--LAST-INDEX-->/index_page($gallery->{pages})/eg;
		if ($page == 1) {
			$line =~ s/<!--NEXT-INDEX-->/index_page(2)/eg;
			$line =~ s/<!--PREV-INDEX-->/index_page($gallery->{pages})/eg;
		} elsif ($page == $gallery->{pages}) {
			$line =~ s/<!--NEXT-INDEX-->/index_page(1)/eg;
			$line =~ s/<!--PREV-INDEX-->/index_page($page-1)/eg;
		} else {
			$line =~ s/<!--NEXT-INDEX-->/index_page($page+1)/eg;
			$line =~ s/<!--PREV-INDEX-->/index_page($page-1)/eg;
		}

		print IXW "$line";
	}
	close(IXW);
	close(IXR);
	print "$msgprefix[1] closing index for page $page ($current_index)\n";

}

{
	unlink($config{filename_index});
	(my $first_index = $config{filename_index_pages}) =~ s/#/1/;
	symlink($first_index,$config{filename_index});
}

=head2 update permission of gallery files

=cut

if ($config{files_permissions}) {
	printf "$msgprefix[1] setting file permissions to %o\n", $config{files_permissions};

	printf "$msgprefix[2] *.html\n";
	chmod($config{files_permissions},"*.html");

	printf "$msgprefix[2] $config{prefix_thumbnail}*.*\n";
	chmod($config{files_permissions},"$config{prefix_thumbnail}*.*");

	printf "$msgprefix[2] $config{prefix_slide}*.*\n";
	chmod($config{files_permissions},"$config{prefix_slide}*.*");

	printf "$msgprefix[2] .$config{filename_tile}\n";
	chmod($config{files_permissions},"$config{filename_tile}");

	printf "$msgprefix[2] $config{filename_index}\n";
	chmod($config{files_permissions},"$config{filename_index}");

	foreach my $image (@{$gallery->{images}}) {
		print "$msgprefix[2] $image->{filename}\n";
		chmod($config{files_permissions},"$image->{filename}");
	}
}
die "$msgprefix[0] done!\n";

