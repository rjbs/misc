#!/usr/bin/perl

# $Id: mfn,v 10.3 2003/07/23 04:57:10 mdxi Exp $

# recursively seek and normalize files named by dipshits

use File::Find;
use Getopt::Long;
$Getopt::Long::ignorecase = 0;

$VERSION = "R9v1";
      $i = 0; # files renamed
      $j = 0; # files noclobbered
      $k = 0; # total files seen
   $date = `date +%Y%m%dT%H%M`;
  @media = qw(mp2 mp3 ogg mpg mpeg mov avi wmv mp4 qt gif jpg jpeg png);

#------------------------------------------

&handle_args;
finddepth(\&mogrify, $tree);
&report;

#------------------------------------------

sub mogrify {
    if ($opts{nodirs}) {
	return unless ( -f );
    } else {
	$old = $_;
	if ($opts{monly}) {
	    $ismedia = 0;
	    foreach $ext (@media) {
		$ismedia = 1 if (/\.$ext$/i);
	    }
	    return unless $ismedia;
	}
    }

    # never touch .
    return if ($_ eq ".");
    # don't touch anything starting with a dot unless told to
    unless ($opts{dotfiles}) {
	return if ($File::Find::dir =~ /\/\./ or /^\./);
    }

    $k++;

    s/^[\{\[\(\-_]+//;         # drop leading {[(-_
    s/([a-z])([A-Z])/$1\_$2/g; # Insert '_' between caseSeparated words
    s/^(\d+)/$1-/;             # Add a hyphen after initial numbers
    s/[\{\[\(\)\]\}]/-/g;      # change remaining {[()]} to '-'
    s/\s+/_/g;                 # change whitespace to '_'
    s/\&/_and_/g;              # change '&' to "_and_"
    s/[^\w\-\.]//g;            # drop if not word, '-', '.'
    s/_+-+/-/g;                # collapse _- sequences
    s/-+_+/-/g;                # collapse -_ sequences
    s/(\-|\_|\.)+/$1/g;        # collapse -_.
    s/(\-|\_|\.)$//;           # remove trailing -_. (rare)
    s/[_\-]+(\.[^\.]+)$/$1/;   # drop trailing -_ before extension

    if (/\.\w+?$/) {           # collapse
	$ext = $&;             # repeat
	s/$ext$ext$/$ext/;     # extensions
    }

    $_ = lc;           # slam lowercase

    if ($old ne $_) {
	if (-e) {
	    unless ($opts{clobber}) {
		$noclobbers[$j] = $File::Find::name . ' ('.$_.')';
		$j++;
		return(1);
	    }
	}
	if ($opts{interactive}) {
	    interactive_change($_);
	} else {
	    $renamed[$i] = " ". $File::Find::name . "\n        " .
		$File::Find::dir . "/" . $_;
	    $i++;
	    rename($old, $_) unless ($opts{debug});
	}
	print $old,'->',$_,"\n" if $opts{verbose};
    } else {
	# old, new names are same
	# NOP
    }
}


sub report {
    unless ($opts{nolog}) {
	if ($opts{keeplog}) { 
	    open(LOG,">> $opts{logfile}") or
		die "Can't open logfile $opts{logfile}\n";
	} else { 
	    open(LOG,"> $opts{logfile}") or
		die "Can't open logfile $opts{logfile}\n";
	}
	select LOG;
	print ">>>>>> ",$date,"=" x 70,"\n";
	foreach (@noclobbers) {
	    print "NOCLOB:",$_,"\n";
	}
	if (defined @noclobbers) { print "-" x 70,"\n" }
	foreach (@renamed) {
	    print "RENAME:",$_,"\n";
	}
	select STDOUT;
	close(LOG);
    }
    unless ($opts{silent}) {
	print "\nFile counts\n";
	print "-" x 20,"\n";
	print "Seen     : ",$k
	   ,"\nRenamed  : ",$i
	   ,"\nNoclobber: ",$j,"\n";
	print "-" x 20,"\n";
	print "See ",$opts{logfile}," for full details\n\n";
    }
}


sub handle_args {
    @usermedia = ();

    %opts = (
	     clobber     => 0,
	     debug       => 0,
	     dotfiles    => 0,
	     interactive => 0,
	     keeplog     => 0,
	     logfile     => $ENV{HOME}."/mfn.log",
	     nolog       => 0,
	     monly       => 0,
	     nodirs      => 0,
	     silent      => 0,
	     verbose     => 0,
	     );

    $rc = GetOptions( \%opts,
		      'clobber|c',
		      'debug|d',
		      'dotfiles|D',
		      'help|h',
		      'interactive|i',
		      'keeplog|keep-log|k',
		      'logfile|L',
		      'media|M=s' => \@usermedia,
		      'monly|media-only|m',
		      'nolog|no-log|l',
		      'nodirs|no-dirs|n',
		      'silent|s',
		      'verbose|v',
		      'version|V'
		      );

    die "E: Error in argument processing (see above for more info); bailing.\n"
	if (! $rc);

    if ($opts{help})     { &help; exit }
    if ($opts{version})  { print "This is mfn ",$VERSION,"\n"; exit }

    if (@usermedia) {
	@media = ();
	@media = split(/,/,join(',',@usermedia));
    }

    if (@ARGV) {
	$tree = shift @ARGV;
    } else {
	$tree = '.';
    }
}



sub interactive_change {
    print "Okay [y/N/q]? ";
    $yn = <STDIN>; chomp $yn;
    if ($yn =~ /^y/i) { 
	print "Renamed ";
	rename($old, $_[0]) unless ($opts{debug});
    } elsif  ($yn =~ /^q/i) { 
	exit;
    } else {
	print "OK, not renamed.\n\n";
    }
}

sub help {
    print <<HELP;
Usage: mfn [options] [<tree>]
  Where <tree> is the directory to use as the top of the recursive
  search. If <tree> is not given, the current directory will be used.
Options:
  -c --clobber      Overwrite files with the same name as the mogrified name
  -d --debug        Do everything but rename files
  -D --dotfiles     Don't exclude dotfiles
  -i --interactive  Ask permission before renaming anything
  -k --keep-log     Append to logfile instead of overwriting
  -l --no-log       Don't write to logfile
  -L --logfile      Location of the logfile (~/mfn.log)
  -m --media-only   Only rename media files
  -M --media        Comma separated list of media extensions
                    (@media)
  -n --no-dirs      Don't rename directories
  -s --silent       Don't print anything to STDOUT
  -v --verbose      Print extra info to STDOUT
  -V --version      Show version
  -h --help         Show this help
HELP
}
