#!perl
use 5.18.0;
use warnings;
use HTTP::Tiny;
use MetaCPAN::API;
use Parse::CPAN::Packages::Fast;
use YAML::XS ();

my $mcpan = MetaCPAN::API->new;

my $saved = YAML::XS::LoadFile('code-review.yaml');

my $p = Parse::CPAN::Packages::Fast->new(
  "$ENV{HOME}/Dropbox/minicpan/modules/02packages.details.txt.gz"
);

my @projects = grep {; ! $saved->{review} // '' eq 'never' } keys %$saved;

my $dist = {};

DIST: for my $d (
  sort { fc $a->dist cmp fc $b->dist } $p->latest_distributions
) {
  next unless $d->cpanid eq 'RJBS';
  next if $d->dist eq 'perl';

  $dist->{ $d->dist } = $d;
}

for my $name (
  sort {
    ($saved->{$a}{'last-review'} // '0') cmp ($saved->{$b}{'last-review'} // 0)
    ||
    fc $a cmp fc $b
  } @projects
) {
  my @notes = notes_for($name);
  say "=== $name ==========";
  printf "    %s\n", $_ for @notes;

  print "...hit enter...";
  scalar <STDIN>;
}

sub rt_data {
  state %rt_data;
  unless (%rt_data) {
    my $res = HTTP::Tiny->new->get(
      'https://rt.cpan.org/Public/bugs-per-dist.data-json'
    );
    die "Can't get RT bug count JSON" unless $res->{success};
    my ($json) = split /\n/, $res->{content};
    my $dists = JSON->new->decode($json);
    for my $dist (@$dists) {
      my $name = $dist->{dist};
      $rt_data{ $name } = {
        open    => 0,
        stalled => 0,
      };

      $rt_data{ $name }{open} += delete $dist->{counts}{$_}
        for qw(active patched new open);

      $rt_data{ $name }{active} += delete $dist->{counts}{$_}
        for qw(stalled);

      delete $dist->{counts}{$_} for qw(inactive resolved deleted rejected);

      if (my @keys = keys %{ $dist->{counts} }) {
        die "unknown statuses for tickets in $name: @keys\n";
      }
    }
  }

  return \%rt_data;
}

sub notes_for {
  my ($name) = @_;

  my $home = $saved->{$name}{home} // 'CPAN';

  if ($home ne 'CPAN') {
    return ("not hosted at CPAN, but at $home");
  }

  my $release = eval { $mcpan->release( distribution => $name ) };
  return ("couldn't find dist on metacpan") unless $release;

  my @notes;

  my $tracker = $release->{resources}{bugtracker};
  if (! $tracker->{web} or $tracker->{web} =~ /rt.cpan/) {
    push @notes, "still using rt.cpan.org";
  }

  my $lc;
  my $repo = $release->{resources}{repository}{url};
  if (! $repo) {
    push @notes, "no repository on file";
  } elsif ($repo !~ /github.com/) {
    push @notes, "not using GitHub for repo";
  } elsif ($repo =~ /\Q$name/i && $repo !~ /\Q$name/) {
    $lc = 1;
    push @notes, "GitHub repo is not capitalized correctly";
  }

  # get bug counts
  # check that $dist->{metadata}{generated_by} is /Dist::Zilla/

  return @notes;
}
