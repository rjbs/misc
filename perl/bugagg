#!/usr/bin/perl
use strict;
use warnings;

use Compress::Zlib;
use HTML::TreeBuilder;
use String::Truncate
  trunc => { length => 4,  -as => 'sev_trunc' },
  elide => { length => 47, -as => 'subj_elide' };
use Text::Table;
use Time::Duration::Parse;
use WWW::Mechanize;

my $CPAN = '/Users/rjbs/mirrors/minicpan';

# my $dist_re = qr{/RJBS/([-.\w]+)-\d.+.tar.gz};
my $DIST_RE = qr{/((?:(?:E?mail)|MIME)[-.\w]+)-\d.+.tar.gz};

my %SEVERITY = (
  Critical    => 100,
  Important   =>  90,
  Normal      =>  80,
  Unimportant =>  70,
  Wishlist    =>  60,
);

sub sev_value {
  my ($severity) = @_;
  return 0 unless exists $SEVERITY{ $severity };
  return $SEVERITY{ $severity };
}

my $packages_gz = gzopen(
  "$CPAN/modules/02packages.details.txt.gz",
  'rb',
);

my @dists = do {
  my $line;
  my %dists;
  while ($packages_gz->gzreadline($line) > 0) {
    next unless $line =~ $DIST_RE;
    $dists{$1} = 1;
  }
  
  keys %dists;
};

sub compress_name {
  my ($dist, $extra) = @_;

  my @split = split /-/, $dist;
  my $last  = pop @split;

  join '', (map { substr $_, 0, 1 } @split),
                  substr $last, 0, $extra + 1;
}

my %unique_name;
{
  my $i = 0;
  $unique_name{$_} = compress_name($_, $i) for @dists;
  
  while (1) {
    my %seen;
    $seen{$_}++ for values %unique_name;
    
    my @abbr = grep { $seen{$_} > 1 } keys %seen;
    last unless @abbr;

    for my $abbr (@abbr) {
      for my $dist (grep { $unique_name{$_} eq $abbr } @dists) {
        $unique_name{ $dist } = compress_name($dist, $i);
      }
    }
    $i++;
  }
}

my $mech = WWW::Mechanize->new;

my @bugs;
for my $dist (@dists) {
  my $url
    = sprintf "http://rt.cpan.org/Public/Dist/Display.html?Name=%s", $dist;

  $mech->get($url);
  my $tree = HTML::TreeBuilder->new_from_content($mech->content);
  
  my @rows = $tree->look_down(_tag => 'tr', class => 'oddline'),
             $tree->look_down(_tag => 'tr', class => 'oddline');

  for my $bug (@rows) {
    my %bug;
    @bug{qw(id subject status severity last_update broken_in fixed_in)}
      = map { $_->as_text } $bug->look_down(_tag => 'td');

    $bug{sev_value} = sev_value($bug{severity});

    $bug{last_update} =~ s/ ago$//;

    $bug{ago_value} = parse_duration($bug{last_update});

    $bug{dist} = $dist;

    push @bugs, \%bug;
  }
}

my @columns = qw(id severity dist subject last_update);

my @headers = map {
  my $c = $_;
  $c =~ s/severity/sev/;
  $c =~ s/last_//;
  $c, \' | '
} @columns;
pop @headers;

my $table = Text::Table->new(@headers);

my %xform = (
  severity => \&sev_trunc,
  subject  => \&subj_elide,
  dist     => sub { $unique_name{$_[0]} },
  last_update => sub { my $v = $_[0]; $v =~ s/(\s..)\S+$/$1/g; $v },
);

sub bug_sort {
     $b->{sev_value} <=> $a->{sev_value}
  || $b->{ago_value} <=> $a->{ago_value}
}

for my $bug (sort bug_sort @bugs) {
  $table->add(map {
    exists $xform{$_} ? $xform{$_}($bug->{$_}) : $bug->{$_}
  } @columns);
}

print $table;
