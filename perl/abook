#!/usr/bin/perl
use strict;
use warnings;

package App::Abook;

our $VERSION = '0.001';

=head1 NAME

App::Abook -- create mail helper files for Mac OS X's Address Book entries

=head1 SYNOPSIS

This script finds all people in the Address Book who have an email address.
For each person found, a line is printed in this format:

 alias FirstnameLastname email@domain.com (Firstname Lastname)

If the nickname field is set, another line is printed, replacing
FirstnameLastname with the nickname.

Only the first-listed email address for the user is used.

=head1 VERSION

version 0.001

  $Id: /my/rjbs/conf/mail/abook 30888 2007-03-07T02:48:55.067605Z rjbs  $

=cut

use Getopt::Long::Descriptive;
use Mac::Glue qw(:glue);
use Sub::Install qw(install_sub);

my ($opt, $usage) = describe_options(
  '%c %o',
  [ 'procmailrc|P=s', 'filename to which to write procmail recipies' ],
  [ 'muttrc|M=s',     'filename to which to write mutt rules'        ],
);

die "you must supply either --procmailrc or --muttrc\n"
  unless $opt->{procmailrc} or $opt->{muttrc};

my $abook = App::Abook->new({
  procmailrc => $opt->{procmailrc},
  muttrc     => $opt->{muttrc},
});

$abook->run;

# methods below

sub new {
  my ($class, $arg) = @_;

  my $self = bless $arg => $class;

  $self->{abook} = Mac::Glue->new("Address_Book");

  return $self;
}

sub abook { $_[0]->{abook}; }

BEGIN {
  for my $file (qw(muttrc procmailrc)) {
    my $fh_method = "_$file\_fh";

    my $fh_sub = sub {
      my ($self) = @_;

      return unless $self->{$file};
      return $self->{$fh_method} if $self->{$fh_method};

      open my $fh, '>', $self->{$file}
        or die "couldn't open $file for writing: $!";

      return $self->{$fh_method} = $fh;
    };

    install_sub({
      code => $fh_sub,
      as   => $fh_method,
    });

    my $print_sub = sub {
      my ($self, $line) = @_;
      return unless $self->{$file};
      print {$self->$fh_method} "$line\n"
        or die "couldn't write line to $file: $!";
    };

    install_sub({
      code => $print_sub,
      as   => "$file\_line",
    });
  }

  sub _munger {
    my ($code) = @_;
    sub {
      my (undef, $str) = @_;
      return unless defined $str;
      $str = $code->($str);
      return $str;
    };
  }

  install_sub({
    code => _munger(sub { $_[0] =~ tr/\216\277/e0/; $_[0] }),
    as   => 'asciify',
  });

  install_sub({
    code => _munger(sub { $_[0] =~ tr/ .'//d; $_[0] }),
    as   => 'aliasify',
  });
}

sub _demsng {
  return if ! $_[1] or $_[1] eq 'msng';
  return $_[1];
}

sub _personify {
  my ($self, $person) = @_;

  return unless my @emails = map { $self->_demsng($_->prop('value')->get) }
                             $person->prop("email")->get;

  return {
    name   => scalar $self->_demsng($person->prop('name')->get),
    nick   => scalar $self->_demsng($person->prop('nickname')->get),
    emails => \@emails,
    note   => scalar $self->_demsng($person->prop('note')->get),
  };
}

sub people {
  my ($self) = @_;

  my @people = map { $self->_personify($_) } $self->abook->prop("people")->get;
}

sub run {
  my ($self) = @_;

  for my $person ($self->people) {
    my $name   = $self->asciify($person->{name});
    my @emails = @{ $person->{emails} };

    my ($folder, $sig);

    if ($person->{note}) {
      ($folder) = $person->{note} =~ /^folder:\s*(\S+)$/sm;
      ($sig)    = $person->{note} =~ /^sig:\s*(\S+)$/sm;
    }

    if ($folder) {
      $folder =~ tr{/}{.};
      $self->muttrc_line("save-hook ~f$_ =$folder") for @emails;
      $self->muttrc_line("mailboxes =$folder")
        unless $self->{_saw_folder}{$folder}++;

      if ($self->_procmailrc_fh) {
        for my $email (@emails) {
          $self->procmailrc_line(":0");
          $self->procmailrc_line("* From:.*$email");
          $self->procmailrc_line(".$folder/");
          $self->procmailrc_line(q{});
        }
      }
    }

    if ($sig) {
      $self->muttrc_line(qq{send-hook ~t$_ set signature="~/.sig/$sig"})
        for @emails;
    }

    my @aliases
      = grep { defined $_ } map { $self->aliasify($_) } $person->{nick}, $name;

    $self->muttrc_line("alias $_ $emails[0] ($name)") for @aliases;

    # It's not that you're expected to -use- these aliases, but they allow
    # mutt's reverse_alias to do its thing.
    if (@emails > 1) {
      for my $i (1 .. $#emails) {
        $self->muttrc_line("alias $aliases[0]-$i $emails[$i] ($name)");
      }
    }
  }
}

1;
